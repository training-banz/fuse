<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:camel="http://camel.apache.org/schema/blueprint"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd        http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <!-- OSGI blueprint property placeholder -->
    <cm:property-placeholder id="myblueprint.placeholder" persistent-id="org.apache.servicemix.examples.camel.sql">
        <cm:default-properties>
            <cm:property name="h2_username" value="sa"/>
            <cm:property name="h2_password" value="sa"/>
            <cm:property name="h2_database" value="winerydb"/>
        </cm:default-properties>
    </cm:property-placeholder>
    <bean class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" id="dataSource">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="jdbc:h2:~/${h2_database}"/>
        <property name="username" value="${h2_username}"/>
        <property name="password" value="${h2_password}"/>
    </bean>
    <bean class="com.sample.realecantina.DatabaseBeanH2"
        destroy-method="destroy" id="initDatabase" init-method="create">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean class="org.apache.camel.component.sql.SqlComponent" id="sql">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <camelContext id="myCamel" trace="false" xmlns="http://camel.apache.org/schema/blueprint">
        <restConfiguration apiContextListing="true"
            apiContextPath="api-docs" bindingMode="json"
            component="jetty" contextPath="realecantina/rest"
            enableCORS="true" port="9091">
            <dataFormatProperty key="prettyPrint" value="true"/>
            <!-- we want json output in pretty mode -->
            <!-- setup swagger api descriptions -->
            <apiProperty key="base.path" value="rest"/>
            <apiProperty key="api.version" value="2.0"/>
            <!-- 1.2.3 -->
            <apiProperty key="api.title" value="Reale Cantina ワイン検索サービス"/>
            <apiProperty key="api.description" value="Reale Cantinaのバックヤードから、お好みのワインを検索することができます"/>
            <apiProperty key="api.contact.name" value="レッドハット グローバル プロフェッショナル サービス"/>
        </restConfiguration>
        <rest path="/winery">
            <description>ワインを探す</description>
            <get consumes="application/json" outType="java.util.Map[]"
                produces="application/json" uri="/all">
                <description>全てのワインを表示</description>
                <responseMessage message="All the wineries"/>
                <to uri="direct:_get_wineries"/>
            </get>
            <get consumes="application/json" outType="java.util.Map[]" produces="application/json">
                <description>ワインの特徴で検索</description>
                <param dataType="string"
                    description="ワインの味を指定 例: フルボディ,エレガント など"
                    name="taste" type="query"/>
                <responseMessage message="recommend the winery for you"/>
                <to uri="direct:_get_wineries_by_taste"/>
            </get>
        </rest>
        <route id="_route1_get_wineries">
            <!-- streamCache="true" -->
            <!-- file version -->
            <from id="_get_wineries" uri="direct:_get_wineries"/>
            <to id="_toSql1" uri="sql:SELECT * FROM winery"/>
        </route>
        <route id="_route2_get_wineries_by_taste">
            <!-- streamCache="true" -->
            <!-- file version -->
            <from id="_get_wineries_by_taste" uri="direct:_get_wineries_by_taste"/>
            <to id="_toSql2" uri="sql:SELECT * FROM winery WHERE taste = :#taste"/>
        </route>
    </camelContext>
</blueprint>
